// Utility ƒë·ªÉ ki·ªÉm tra v√† debug authentication
export const authUtils = {
    /**
     * Ki·ªÉm tra xem user c√≥ ƒëang ƒëƒÉng nh·∫≠p kh√¥ng
     */
    isAuthenticated(): boolean {
        if (typeof window === 'undefined') return false

        const token = this.getAuthToken()
        return !!token
    },

    /**
     * L·∫•y authentication token t·ª´ storage
     */
    getAuthToken(): string | null {
        if (typeof window === 'undefined') return null

        // Ki·ªÉm tra auth-storage tr∆∞·ªõc (c√≥ th·ªÉ ch·ª©a token th·ª±c s·ª±)
        const authStorage = localStorage.getItem('auth-storage')
        if (authStorage) {
            try {
                const authData = JSON.parse(authStorage)
                console.log('üîê Auth storage found:', authData)

                // T√¨m token trong auth-storage
                if (authData.accessToken) {
                    console.log('‚úÖ Found accessToken in auth-storage')
                    return authData.accessToken
                }
                if (authData.token) {
                    console.log('‚úÖ Found token in auth-storage')
                    return authData.token
                }
            } catch (e) {
                console.warn('‚ùå Could not parse auth-storage')
            }
        }

        // Ki·ªÉm tra currentUser token
        const currentUser = localStorage.getItem('currentUser')
        if (currentUser) {
            try {
                const userData = JSON.parse(currentUser)
                console.log('üë§ Current user found:', userData)

                if (userData.token) {
                    console.log('‚úÖ Found token in currentUser')
                    return userData.token
                }
            } catch (e) {
                console.warn('‚ùå Could not parse currentUser')
            }
        }

        const tokenSources = {
            'localStorage.accessToken': localStorage.getItem('accessToken'),
            'localStorage.token': localStorage.getItem('token'),
            'sessionStorage.accessToken': sessionStorage.getItem('accessToken'),
            'sessionStorage.token': sessionStorage.getItem('token'),
            'localStorage.authToken': localStorage.getItem('authToken'),
            'localStorage.jwt': localStorage.getItem('jwt'),
            'localStorage.userToken': localStorage.getItem('userToken')
        }

        // Log t·∫•t c·∫£ token sources ƒë·ªÉ debug
        console.log('üîê Auth Debug - Available tokens:', tokenSources)

        // Tr·∫£ v·ªÅ token ƒë·∫ßu ti√™n t√¨m th·∫•y
        for (const [source, token] of Object.entries(tokenSources)) {
            if (token) {
                console.log('‚úÖ Using token from:', source)
                return token
            }
        }

        console.warn('‚ùå No authentication token found!')
        return null
    },

    /**
     * Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng (h·ªó tr·ª£ c·∫£ JWT v√† non-JWT)
     */
    isTokenValid(token: string): boolean {
        if (!token) return false

        // Ki·ªÉm tra JWT format
        if (this.isJWTToken(token)) {
            return this.validateJWT(token)
        } else {
            // N·∫øu kh√¥ng ph·∫£i JWT, ki·ªÉm tra ƒë·ªô d√†i t·ªëi thi·ªÉu
            console.log('üîë Non-JWT token detected, checking minimum length...')
            const isValid = token.length >= 10 // Token ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±
            console.log(`‚úÖ Non-JWT token length: ${token.length}, valid: ${isValid}`)
            return isValid
        }
    },

    /**
     * Ki·ªÉm tra xem token c√≥ ph·∫£i JWT kh√¥ng
     */
    isJWTToken(token: string): boolean {
        // JWT c√≥ format: header.payload.signature (3 ph·∫ßn ƒë∆∞·ª£c ph√¢n t√°ch b·ªüi d·∫•u ch·∫•m)
        const parts = token.split('.')
        return parts.length === 3
    },

    /**
     * Validate JWT token
     */
    validateJWT(token: string): boolean {
        try {
            const parts = token.split('.')
            if (parts.length !== 3) {
                console.warn('‚ùå Invalid JWT format - expected 3 parts')
                return false
            }

            // Decode payload ƒë·ªÉ ki·ªÉm tra expiration
            const payload = JSON.parse(atob(parts[1]))
            const now = Math.floor(Date.now() / 1000)

            if (payload.exp && payload.exp < now) {
                console.warn('‚ùå JWT token has expired')
                return false
            }

            console.log('‚úÖ JWT token appears valid')
            return true
        } catch (error) {
            console.error('‚ùå Error validating JWT token:', error)
            return false
        }
    },

    /**
     * Debug authentication status
     */
    debugAuthStatus(): void {
        console.log('üîç === AUTHENTICATION DEBUG ===')
        console.log('Window available:', typeof window !== 'undefined')
        console.log('Is authenticated:', this.isAuthenticated())

        const token = this.getAuthToken()
        if (token) {
            console.log('Token found:', `${token.substring(0, 20)}...`)
            console.log('Token type:', this.isJWTToken(token) ? 'JWT' : 'Non-JWT')
            console.log('Token valid:', this.isTokenValid(token))

            if (this.isJWTToken(token)) {
                try {
                    const parts = token.split('.')
                    const payload = JSON.parse(atob(parts[1]))
                    console.log('JWT payload:', payload)
                } catch (e) {
                    console.log('Could not decode JWT payload')
                }
            } else {
                console.log('Non-JWT token length:', token.length)
            }
        } else {
            console.log('No token found')
        }

        // Log t·∫•t c·∫£ storage items
        if (typeof window !== 'undefined') {
            console.log('localStorage items:', Object.keys(localStorage))
            console.log('sessionStorage items:', Object.keys(sessionStorage))
        }

        console.log('=== END AUTH DEBUG ===')
    },

    /**
     * Clear t·∫•t c·∫£ authentication data
     */
    clearAuth(): void {
        if (typeof window === 'undefined') return

        const authKeys = [
            'accessToken', 'token', 'authToken', 'jwt', 'userToken'
        ]

        authKeys.forEach(key => {
            localStorage.removeItem(key)
            sessionStorage.removeItem(key)
        })

        console.log('üßπ Cleared all authentication data')
    },

    /**
     * Ki·ªÉm tra xem c√≥ c·∫ßn login kh√¥ng
     */
    needsLogin(): boolean {
        return !this.isAuthenticated()
    },

    /**
     * H∆∞·ªõng d·∫´n user c√°ch l·∫•y token th·ª±c s·ª±
     */
    showLoginInstructions(): void {
        console.log('üîê === LOGIN INSTRUCTIONS ===')
        console.log('ƒê·ªÉ s·ª≠ d·ª•ng video call, b·∫°n c·∫ßn:')
        console.log('1. ƒêƒÉng nh·∫≠p v√†o ·ª©ng d·ª•ng')
        console.log('2. Ho·∫∑c ki·ªÉm tra localStorage/sessionStorage c√≥ token h·ª£p l·ªá')
        console.log('3. Token ph·∫£i l√† JWT th·ª±c s·ª± t·ª´ server (kh√¥ng ph·∫£i token demo)')
        console.log('4. N·∫øu ƒë√£ c√≥ token, h√£y ki·ªÉm tra xem c√≥ b·ªã expired kh√¥ng')
        console.log('=== END LOGIN INSTRUCTIONS ===')
    }
}
